// Meal Planning System (Refactored)
class MealPlanner {
  constructor() {
    this.foods = window.THAI_FOODS;
    this.calculator = window.calorieCalculator;
    this.utils = window.MealPlanUtils;
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
  generateMealPlan(targetCalories, goal = 'maintain') {
    try {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏∑‡πâ‡∏≠
      const distribution = this.calculator.calculateMealDistribution(targetCalories);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏∑‡πâ‡∏≠
      const mealPlan = {
        date: window.formatThaiDate(new Date()),
        targetCalories,
        goal,
        breakfast: this.selectMealsForCalories('breakfast', distribution.breakfast, goal),
        lunch: this.selectMealsForCalories('lunch', distribution.lunch, goal),
        dinner: this.selectMealsForCalories('dinner', distribution.dinner, goal),
        snacks: this.selectMealsForCalories('snacks', distribution.snacks, goal),
        distribution
      };

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏£‡∏ß‡∏°
      mealPlan.totalCalories = window.calculateTotalCalories(mealPlan);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      mealPlan.tips = window.generateMealTips(goal);
      mealPlan.nutritionNotes = window.getNutritionNotes(goal);
      mealPlan.aiResponse = window.getAIMealResponse();

      return mealPlan;
    } catch (error) {
      console.error('Error generating meal plan:', error);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
    }
  }

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  selectMealsForCalories(mealType, targetCalories, goal) {
    const availableFoods = this.foods[mealType] || [];
    if (availableFoods.length === 0) {
      return [];
    }

    const selectedMeals = [];
    let remainingCalories = targetCalories;
    const usedIndexes = new Set();

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô (70-80% ‡∏Ç‡∏≠‡∏á‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà)
    const mainCalories = Math.round(remainingCalories * 0.75);
    const mainMeal = this.selectSingleMeal(availableFoods, mainCalories, goal, usedIndexes);
    
    if (mainMeal) {
      selectedMeals.push(mainMeal);
      remainingCalories -= mainMeal.calories;
      usedIndexes.add(availableFoods.indexOf(mainMeal));
    }

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
    while (remainingCalories > 50 && selectedMeals.length < 3) {
      const supplementMeal = this.selectSingleMeal(
        availableFoods, 
        remainingCalories, 
        goal, 
        usedIndexes,
        true // ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°
      );
      
      if (!supplementMeal) break;
      
      selectedMeals.push(supplementMeal);
      remainingCalories -= supplementMeal.calories;
      usedIndexes.add(availableFoods.indexOf(supplementMeal));
    }

    return selectedMeals;
  }

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  selectSingleMeal(foods, targetCalories, goal, usedIndexes = new Set(), isSupplement = false) {
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
    const availableFoods = foods.filter((food, index) => !usedIndexes.has(index));
    
    if (availableFoods.length === 0) return null;

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    let suitableFoods = this.filterFoodsByGoal(availableFoods, goal);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤
    if (isSupplement) {
      suitableFoods = suitableFoods.filter(food => food.calories <= targetCalories);
    }

    if (suitableFoods.length === 0) {
      suitableFoods = availableFoods.filter(food => food.calories <= targetCalories * 1.2);
    }

    if (suitableFoods.length === 0) return null;

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    const topChoices = window.MealPlanUtils.findClosestCalorieFoods(suitableFoods, targetCalories, 3);
    const selectedMeal = topChoices[Math.floor(Math.random() * topChoices.length)];

    return {
      ...selectedMeal,
      id: window.generateMealId()
    };
  }

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
  filterFoodsByGoal(foods, goal) {
    return foods.filter(food => window.MealPlanUtils.isFoodSuitableForGoal(food, goal));
  }

  // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡πâ‡∏≠‡πÉ‡∏î‡∏°‡∏∑‡πâ‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á
  regenerateMealType(mealPlan, mealType) {
    if (!mealPlan.distribution || !mealPlan.distribution[mealType]) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà');
    }

    const targetCalories = mealPlan.distribution[mealType];
    const newMeals = this.selectMealsForCalories(mealType, targetCalories, mealPlan.goal);
    
    return {
      ...mealPlan,
      [mealType]: newMeals,
      totalCalories: window.calculateTotalCalories({
        ...mealPlan,
        [mealType]: newMeals
      })
    };
  }

  // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡∏°‡πà
  regenerateAllMeals(mealPlan) {
    return this.generateMealPlan(mealPlan.targetCalories, mealPlan.goal);
  }

  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  analyzeMealPlan(mealPlan) {
    const summary = window.MealPlanUtils.generatePlanSummary(mealPlan, mealPlan.targetCalories);
    const balance = window.MealPlanUtils.checkNutritionalBalance(mealPlan);
    
    return {
      summary,
      balance,
      recommendations: this.generateRecommendations(mealPlan, summary, balance)
    };
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
  generateRecommendations(mealPlan, summary, balance) {
    const recommendations = [];
    
    // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
    if (summary.difference > 10) {
      recommendations.push('‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤');
    } else if (summary.difference < -10) {
      recommendations.push('‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤');
    }

    // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
    if (balance.protein < 2) {
      recommendations.push('‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠ ‡∏õ‡∏•‡∏≤ ‡πÑ‡∏Ç‡πà ‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ');
    }
    
    if (balance.vegetables < 2) {
      recommendations.push('‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏±‡∏Å‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏ü‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô');
    }

    return recommendations;
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  saveMealPlan(mealPlan, userId) {
    try {
      const savedPlans = this.getSavedPlans(userId);
      const planWithId = {
        ...mealPlan,
        id: `plan_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        userId,
        createdAt: new Date().toISOString()
      };
      
      savedPlans.unshift(planWithId);
      
      // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 10 ‡πÅ‡∏ú‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      if (savedPlans.length > 10) {
        savedPlans.splice(10);
      }
      
      localStorage.setItem(`mealPlans_${userId}`, JSON.stringify(savedPlans));
      return planWithId;
    } catch (error) {
      console.error('Error saving meal plan:', error);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ');
    }
  }

  // ‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
  getSavedPlans(userId) {
    try {
      const saved = localStorage.getItem(`mealPlans_${userId}`);
      return saved ? JSON.parse(saved) : [];
    } catch (error) {
      console.error('Error loading saved plans:', error);
      return [];
    }
  }

  // ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  deleteMealPlan(planId, userId) {
    try {
      const savedPlans = this.getSavedPlans(userId);
      const filteredPlans = savedPlans.filter(plan => plan.id !== planId);
      localStorage.setItem(`mealPlans_${userId}`, JSON.stringify(filteredPlans));
      return true;
    } catch (error) {
      console.error('Error deleting meal plan:', error);
      return false;
    }
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÅ‡∏•‡∏∞ export
window.mealPlanner = new MealPlanner();

console.log('üçΩÔ∏è Meal planner system loaded');