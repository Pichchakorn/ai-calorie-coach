// Utility Functions for Meal Planning
class MealPlanUtils {
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  static calculateTotalCalories(mealPlan) {
    const meals = ['breakfast', 'lunch', 'dinner', 'snacks'];
    return meals.reduce((total, mealType) => {
      return total + (mealPlan[mealType] || []).reduce((mealTotal, meal) => {
        return mealTotal + (meal.calories || 0);
      }, 0);
    }, 0);
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏∑‡πâ‡∏≠
  static calculateMealCounts(mealPlan) {
    return {
      breakfast: (mealPlan.breakfast || []).length,
      lunch: (mealPlan.lunch || []).length,
      dinner: (mealPlan.dinner || []).length,
      snacks: (mealPlan.snacks || []).length,
      total: (mealPlan.breakfast || []).length + 
             (mealPlan.lunch || []).length + 
             (mealPlan.dinner || []).length + 
             (mealPlan.snacks || []).length
    };
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏∑‡πâ‡∏≠
  static calculateMealCalories(meals) {
    return (meals || []).reduce((total, meal) => total + (meal.calories || 0), 0);
  }

  // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  static shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏Å
  static filterFoodsByTags(foods, tags) {
    if (!tags || tags.length === 0) return foods;
    
    return foods.filter(food => 
      tags.some(tag => food.tags && food.tags.includes(tag))
    );
  }

  // ‡∏´‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
  static findClosestCalorieFoods(foods, targetCalories, count = 3) {
    return foods
      .sort((a, b) => {
        const diffA = Math.abs(a.calories - targetCalories);
        const diffB = Math.abs(b.calories - targetCalories);
        return diffA - diffB;
      })
      .slice(0, count);
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  static generateMealId() {
    return `meal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  static getGoalText(goal) {
    const goalTexts = {
      lose: '‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
      maintain: '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å', 
      gain: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
      muscle: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠'
    };
    return goalTexts[goal] || '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å';
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  static formatThaiDate(date = new Date()) {
    const months = [
      '‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
      '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'
    ];
    
    const day = date.getDate();
    const month = months[date.getMonth()];
    const year = date.getFullYear() + 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
    
    return `${day} ${month} ${year}`;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static isFoodSuitableForGoal(food, goal) {
    const suitabilityRules = {
      lose: (food) => {
        return food.tags.includes('‡∏ú‡∏±‡∏Å') || 
               food.tags.includes('‡πÑ‡∏ü‡πÄ‡∏ö‡∏≠‡∏£‡πå') || 
               food.tags.includes('‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô') ||
               food.tags.includes('‡πÄ‡∏ö‡∏≤') ||
               food.calories < 300;
      },
      gain: (food) => {
        return food.tags.includes('‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô') || 
               food.tags.includes('‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï') ||
               food.calories >= 300;
      },
      muscle: (food) => {
        return food.tags.includes('‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô') || 
               food.tags.includes('‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï');
      },
      maintain: () => true
    };

    const rule = suitabilityRules[goal] || suitabilityRules.maintain;
    return rule(food);
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
  static calculateCalorieDifference(actual, target) {
    if (target === 0) return 0;
    return Math.round(((actual - target) / target) * 100);
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
  static generatePlanSummary(mealPlan, targetCalories) {
    const totalCalories = this.calculateTotalCalories(mealPlan);
    const counts = this.calculateMealCounts(mealPlan);
    const difference = this.calculateCalorieDifference(totalCalories, targetCalories);
    
    let status = '‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢';
    if (difference > 5) status = '‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢';
    else if (difference < -5) status = '‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢';

    return {
      totalCalories,
      targetCalories,
      difference,
      status,
      totalMeals: counts.total,
      breakdown: counts
    };
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
  static checkNutritionalBalance(mealPlan) {
    const allMeals = [
      ...(mealPlan.breakfast || []),
      ...(mealPlan.lunch || []),
      ...(mealPlan.dinner || []),
      ...(mealPlan.snacks || [])
    ];

    const tagCounts = {};
    allMeals.forEach(meal => {
      meal.tags.forEach(tag => {
        tagCounts[tag] = (tagCounts[tag] || 0) + 1;
      });
    });

    return {
      protein: tagCounts['‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô'] || 0,
      carbs: tagCounts['‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï'] || 0,
      vegetables: tagCounts['‡∏ú‡∏±‡∏Å'] || 0,
      fiber: tagCounts['‡πÑ‡∏ü‡πÄ‡∏ö‡∏≠‡∏£‡πå'] || 0,
      vitamins: tagCounts['‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô'] || 0
    };
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  static categorizeFood(food) {
    const categories = [];
    
    if (food.tags.includes('‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô')) categories.push('‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô');
    if (food.tags.includes('‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï')) categories.push('‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï');
    if (food.tags.includes('‡∏ú‡∏±‡∏Å')) categories.push('‡∏ú‡∏±‡∏Å');
    if (food.tags.includes('‡∏ú‡∏•‡πÑ‡∏°‡πâ')) categories.push('‡∏ú‡∏•‡πÑ‡∏°‡πâ');
    if (food.tags.includes('‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ')) categories.push('‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ');
    
    return categories.length > 0 ? categories : ['‡∏≠‡∏∑‡πà‡∏ô‡πÜ'];
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  static generateAdditionalTips(profile, mealPlan) {
    const tips = [];
    const balance = this.checkNutritionalBalance(mealPlan);
    
    if (balance.protein < 3) {
      tips.push('‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
    }
    
    if (balance.vegetables < 2) {
      tips.push('‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏ü‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô');
    }
    
    if (profile.age >= 50 && balance.protein < 4) {
      tips.push('‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ô‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠');
    }
    
    if (profile.goal === 'lose' && balance.fiber < 2) {
      tips.push('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏≠‡∏¥‡πà‡∏°‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô');
    }
    
    return tips;
  }
}

// Export utility functions
window.MealPlanUtils = MealPlanUtils;

// Export individual functions for easier access
window.calculateTotalCalories = MealPlanUtils.calculateTotalCalories.bind(MealPlanUtils);
window.calculateMealCounts = MealPlanUtils.calculateMealCounts.bind(MealPlanUtils);
window.calculateMealCalories = MealPlanUtils.calculateMealCalories.bind(MealPlanUtils);
window.shuffleArray = MealPlanUtils.shuffleArray.bind(MealPlanUtils);
window.generateMealId = MealPlanUtils.generateMealId.bind(MealPlanUtils);
window.getGoalText = MealPlanUtils.getGoalText.bind(MealPlanUtils);
window.formatThaiDate = MealPlanUtils.formatThaiDate.bind(MealPlanUtils);

console.log('üîß Meal plan utilities loaded');